I"=<p>Los packers son herramientas escenciales para el crimeware, ya que componen espectro de métodos y técnicas de evasión y ocultación de cualquier ejemplar, cuyas funciones van desde cambiar el hash de un binario, hasta empaquetar un binario cifrado con otro y ejecutarlo de forma dinámica en memoria, antes de ahondar más en el tema, es necesario contextualizar con un repaso sobre el entorno de ejecución de ART y Dalvik</p>

<p>Sin embargo, si se pide al lector que se haga una distinción entre un <em>packer</em> y un ofuscador en los ejemplares modernos posiblemente el lector llegue a la conclusión de que no tienen diferencias, esto es porque los packers modernos implementan criterios de ofuscación, pero no debe eliminar el hecho de que son procesos diferentes.</p>

<p>Un ofuscador tomaría el archivo <em>apk</em> original, haría modificaciones sobre sus recursos, sus descripciones y el código <em>smali</em> y recompilaría el paquete nuevamente a <em>.apk</em> una vez hechas las transformaciones. El packer actúa de forma envolvente, suelen generar <em>stubs</em> que cargan con el código original encapsulado, así se le hagan modificaciones o no.</p>

<p>Las implementaciones de packers y ofuscadores de alto nivel tales como <a href="https://github.com/woxihuannisja/Bangcle">Bangcle</a>, ProGuard o DexGuard en su mayoria implementan técnicas como cifrar las cadenas de texto, elegir identificadores aleatorios para metodos, y variables, volver a firmar el binario, cambiar aleatoriamente el archivo <em>AndroidManifest.xml</em> sin cambiar la estructura consiguiendo evadir <a href="https://www.youtube.com/watch?v=E_mN90TYnlg">el analisis N-grama</a> y pueden usar también <em>dynamic class loading</em> aprovechando la definición de la clase <a href="https://developer.android.com/reference/dalvik/system/DexClassLoader"><em>DexClassLoader</em></a> para impedir el análisis estático.</p>

<p>La técnica de carga de clases dinámicas es una característica nativa de Android, y citando la misma documentación:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A class loader that loads classes from .jar and .apk files containing a 
classes.dex entry. This can be used to execute code not installed as part
of an application.
</code></pre></div></div>

<p>Existen por si mismos muchos metodos de ofuscacion que aprovechan el diseno del lenguaje y las interfaces con el runtime, exceptuando pues fallas de seguridad del ART, la siguiente tabla es presentada por los creadores de Obfuscapk en su <a href="https://www.sciencedirect.com/sdfe/reader/pii/S2352711019302791/pdf">whitepaper</a>, la cual enumera las tecnicas de ofuscacion que implementa dicha herramienta.</p>

<table>
  <thead>
    <tr>
      <th>Trivial</th>
      <th style="text-align: center">Renaming</th>
      <th style="text-align: center">Encryption</th>
      <th style="text-align: center">Code</th>
      <th style="text-align: right">Reflection</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>RandomManifest</td>
      <td style="text-align: center">ClassRename</td>
      <td style="text-align: center">LibEncryption</td>
      <td style="text-align: center">ArithmethicBranch</td>
      <td style="text-align: right">Reflection</td>
    </tr>
    <tr>
      <td>Rebuild</td>
      <td style="text-align: center">FieldRename</td>
      <td style="text-align: center">ResStringEncryption</td>
      <td style="text-align: center">Reorder</td>
      <td style="text-align: right">AdvancedReflection</td>
    </tr>
    <tr>
      <td>NewAlignment</td>
      <td style="text-align: center">MethodRename</td>
      <td style="text-align: center">AssetEncryption</td>
      <td style="text-align: center">CallIndirection</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td>NewSignature</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">ConstStringEncryption</td>
      <td style="text-align: center">DebugRemoval</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">Goto</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">MethodOverload</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">Nop</td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
</table>

<p>Aqui se supone que va un salto de linea grande joer jaja</p>

<p>Bibliografia</p>

<p>[ 1 ] https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Yu.pdf</p>

<p>[ 2 ] https://attack.mitre.org/techniques/T1540/</p>

<p>[ 3 ] https://securelist.com/roaming-mantis-part-iv/90332/</p>

<p>[ 4 ] https://cryptax.medium.com/a-native-packer-for-android-moqhao-6362a8412fe1</p>

<p>[ 5 ] https://developer.android.com/reference/dalvik/system/DexClassLoader</p>

<p>[ 6 ] https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection</p>

<p>[ 7 ] https://www.sciencedirect.com/sdfe/reader/pii/S2352711019302791/pdf
https://developer.android.com/topic/security/dex</p>

<p>https://www.microsoft.com/security/blog/2020/10/08/sophisticated-new-android-malware-marks-the-latest-evolution-of-mobile-ransomware/</p>

<p>https://www.researchgate.net/figure/Copying-procedure-when-the-CopyBinaryFile-method-is-invoked_fig20_308180878</p>

<p>https://www.researchgate.net/figure/Packing-and-unpacking-mechanisms_fig31_308180878</p>

<p>https://www.researchgate.net/figure/Structure-of-an-APK-file-packed-by-Bangcle_fig35_308180878</p>
:ET